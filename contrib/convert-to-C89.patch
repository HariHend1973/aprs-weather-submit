diff --git a/configure.ac b/configure.ac
index 8733314..cd40586 100644
--- a/configure.ac
+++ b/configure.ac
@@ -17,7 +17,7 @@ dnl
 dnl  You should have received a copy of the GNU Affero General Public License
 dnl  along with this program. If not, see <http://gnu.org/licenses/agpl-3.0.html>.
 
-AC_INIT([aprs-weather-submit], [1.6-git], [colin@colincogle.name])
+AC_INIT([aprs-weather-submit], [1.6-git_C89], [colin@colincogle.name])
 AM_INIT_AUTOMAKE([foreign subdir-objects -Wall -Werror])
 AC_PREREQ
 AC_PROG_INSTALL
@@ -44,7 +44,7 @@ dnl    -Wall         Complain heavily.
 dnl    -Wextra       Complain very heavily.
 dnl    -Werror       Make all warnings errors.
 dnl    -O2           Optimize (unless we're debugging)
-AM_CFLAGS="-std=gnu99 -Wall -Wextra -Werror -O2"
+AM_CFLAGS="-std=c89 -Wall -Wextra -Werror -Wno-format-overflow -O2"
 AM_LDFLAGS="-lm"
 AC_SUBST([AM_CFLAGS])
 AC_SUBST([AM_LDFLAGS])
@@ -56,7 +56,6 @@ AC_CHECK_FUNC([fprintf],  [], AC_MSG_ERROR([fprintf() is required to build this
 AC_CHECK_FUNC([fputs],    [], AC_MSG_ERROR([fputs() is required to build this package but was not found in stdio.h.]))
 AC_CHECK_FUNC([printf],   [], AC_MSG_ERROR([printf() is required to build this package but was not found in stdio.h.]))
 AC_CHECK_FUNC([puts],     [], AC_MSG_ERROR([puts() is required to build this package but was not found in stdio.h.]))
-AC_CHECK_FUNC([snprintf], [], AC_MSG_ERROR([snprintf() is required to build this package but was not found in stdio.h.]))
 
 dnl  Check for string functions.
 AC_CHECK_HEADER(string.h, [], AC_MSG_ERROR([string.h is required to build this package.]))
diff --git a/src/aprs-is.c b/src/aprs-is.c
index a4f00f9..f142d0c 100755
--- a/src/aprs-is.c
+++ b/src/aprs-is.c
@@ -19,6 +19,7 @@ You should have received a copy of the GNU Affero General Public License along
 with this program.  If not, see <https://www.gnu.org/licenses/agpl-3.0.html>.
  */
 
+#undef HAVE_APRSIS_SUPPORT
 #ifdef HAVE_APRSIS_SUPPORT
 
 #include <stdio.h>      /* fprintf(), printf(), fputs() */
diff --git a/src/aprs-is.h b/src/aprs-is.h
index 28d2c44..29d8fbd 100755
--- a/src/aprs-is.h
+++ b/src/aprs-is.h
@@ -19,6 +19,7 @@ You should have received a copy of the GNU Affero General Public License along
 with this program.  If not, see <https://www.gnu.org/licenses/agpl-3.0.html>.
  */
 
+#undef HAVE_APRSIS_SUPPORT
 #ifdef HAVE_APRSIS_SUPPORT
 
 #ifndef aprs_is_h
diff --git a/src/aprs-wx.c b/src/aprs-wx.c
index ecdf8b6..c9135e2 100755
--- a/src/aprs-wx.c
+++ b/src/aprs-wx.c
@@ -19,7 +19,7 @@ You should have received a copy of the GNU Affero General Public License along
 with this program.  If not, see <https://www.gnu.org/licenses/agpl-3.0.html>.
  */
 
-#include <stdio.h>   /* fprintf(), printf(), snprintf(), fputs() */
+#include <stdio.h>   /* fprintf(), printf(), fputs() */
 #include <string.h>  /* strcpy(), strcat(), strlen() */
 #include <math.h>    /* floor(), round(), pow(), fabs() */
 #include <time.h>    /* struct tm, time_t, time(), gmtime() */
@@ -77,10 +77,10 @@ packetConstructor (APRSPacket* const p)
  * @param speed  The wind speed, in miles per hour.
  * @since        0.2
  */
-inline char
+char
 compressedWindSpeed (const unsigned short speed)
 {
-    return (char)(round(log1p(speed) / logf(1.08)) + 33);
+    return (char)(round(log(1 + speed) / log(1.08)) + 33);
 }
 
 /**
@@ -93,7 +93,7 @@ compressedWindSpeed (const unsigned short speed)
  *                  true north.
  * @since           0.2
  */
-inline char
+char
 compressedWindDirection (const unsigned short direction)
 {
 	return (char)(round(direction / 4) + 33);
@@ -178,13 +178,13 @@ uncompressedPosition (char* const pResult, const double decimal,
 
 	if (isLongitude == IS_LATITUDE)
 	{
-		int ret = snprintf(pResult,  9, "%02hi%.2f%c",
+		int ret = sprintf(pResult,  "%02hi%.2f%c",
 		                   degrees, minutes, (decimal < 0 ? 'S' : 'N'));
 		assert(ret >= 0);
 	}
 	else
 	{
-		int ret = snprintf(pResult, 10, "%03hi%.2f%c",
+		int ret = sprintf(pResult, "%03hi%.2f%c",
 		         degrees, minutes, (decimal < 0 ? 'W' : 'E'));
 		assert(ret >= 0);
 	}
@@ -200,11 +200,10 @@ uncompressedPosition (char* const pResult, const double decimal,
  * @param precip  A constant representing how much precipitation precipitated.
  * @since         0.2
  */
-inline void
+void
 rain (char* const pResult, const double precip)
 {
-	int ret = snprintf(pResult, 4, "%03d", (unsigned short)precip);
-	assert(ret >= 0);
+	sprintf(pResult, "%03d", (unsigned short)precip);
 	return;
 }
 
@@ -220,7 +219,7 @@ rain (char* const pResult, const double precip)
  * @return    0 if this value is unspecified/not meaningful; !0 otherwise.
  * @since     0.2
  */
-inline int
+int
 notNull (const char* const val)
 {
 	return val[0] != '.';
@@ -254,19 +253,17 @@ printAPRSPacket (APRSPacket* restrict const p, char* restrict const ret,
 		 * Add 33 as per the spec, and you get 67, the ASCII code for 'C'.
 		 *                                                           ?
 		 *                              header_________ timestamp____ pos_wc_s_Tt__*/
-		int ret = snprintf(result, 48, "%s>APRS,TCPIP*:@%.2d%.2d%.2dz/%s%s_%c%cCt%s",
+		sprintf(result, "%s>APRS,TCPIP*:@%.2d%.2d%.2dz/%s%s_%c%cCt%s",
 			p->callsign, now->tm_mday, now->tm_hour, now->tm_min,
 			p->latitude, p->longitude, p->windDirection[0], p->windSpeed[0],
 			p->temperature);
-		assert(ret >= 0);
 	}
 	else {
 		/*                              header_________ timestamp____pos__wc_ s_t__*/
-		int ret = snprintf(result, 61, "%s>APRS,TCPIP*:@%.2d%.2d%.2dz%s/%s_%s/%st%s",
+		sprintf(result, "%s>APRS,TCPIP*:@%.2d%.2d%.2dz%s/%s_%s/%st%s",
 			p->callsign, now->tm_mday, now->tm_hour, now->tm_min,
 			p->latitude, p->longitude, p->windDirection, p->windSpeed,
 			p->temperature);
-		assert(ret >= 0);
 	}
 
 	if (notNull(p->gust))
diff --git a/src/main.c b/src/main.c
index ae04b66..d391c4e 100755
--- a/src/main.c
+++ b/src/main.c
@@ -42,6 +42,20 @@ with this program.  If not, see <https://www.gnu.org/licenses/agpl-3.0.html>.
 #define MAX(a,b) ((a) < (b) ? (a) : (b))
 #endif
 
+/* round() was not defined until C99.  Re-invent the wheel here. */
+int
+round (double x)
+{
+	if (x - floor(x) <= 0.5)
+	{
+		return ceil(x);
+	}
+	else
+	{
+		return floor(x);
+	}
+}
+
 int
 main (const int argc, const char** argv)
 {
@@ -51,8 +65,6 @@ main (const int argc, const char** argv)
 	signed char  c = '\0';          /* for getopt_long() */
 	int          option_index = 0;  /* for getopt_long() */
 	int          i = 0;
-	int          formatTruncationCheck;  /* so we can compile without
-	                                        -Wno-format-trunctionation */
 	APRSPacket   packet;
 #ifdef HAVE_APRSIS_SUPPORT
 	char         username[BUFSIZE] = "";
@@ -155,8 +167,8 @@ main (const int argc, const char** argv)
 #ifdef HAVE_APRSIS_SUPPORT
 			/* IGate server name (-I | --server) */
 			case 'I':
-				formatTruncationCheck = snprintf(server, strlen(optarg)+1, "%s", optarg);
-				assert(formatTruncationCheck >= 0);
+				assert(strlen(optarg) < BUFSIZE);
+				sprintf(server, "%s", optarg);
 				break;
 
 			/* IGate server port (-o | --port) */
@@ -172,21 +184,21 @@ main (const int argc, const char** argv)
 
 			/* IGate server username (-u | --username) */
 			case 'u':
-				formatTruncationCheck = snprintf(username, strlen(optarg)+1, "%s", optarg);
-				assert(formatTruncationCheck >= 0);
+				assert(strlen(optarg) < BUFSIZE);
+				sprintf(username, "%s", optarg);
 				break;
 
 			/* IGate server password (-d | --password) */
 			case 'd':
-				formatTruncationCheck = snprintf(password, strlen(optarg)+1, "%s", optarg);
-				assert(formatTruncationCheck >= 0);
+				assert(strlen(optarg) < BUFSIZE);
+				sprintf(username, "%s", optarg);
 				break;
 #endif /* HAVE_APRSIS_SUPPORT */
 
 			/* Callsign, with SSID if desired (-k | --callsign) */
 			case 'k':
-				formatTruncationCheck = snprintf(packet.callsign, 10, "%s", optarg);
-				assert(formatTruncationCheck >= 0);
+				assert(strlen(optarg) < BUFSIZE);
+				sprintf(packet.callsign, "%s", optarg);
 				break;
 
 			/* Your latitude, in degrees north (-n | --latitude) */
@@ -241,8 +253,7 @@ main (const int argc, const char** argv)
 				}
 				else
 				{
-					formatTruncationCheck = snprintf(packet.altitude, 6, "%05d", (int)x);
-					assert(formatTruncationCheck >= 0);
+					sprintf(packet.altitude, "%05d", (int)x);
 				}
 				break;
 
@@ -258,13 +269,12 @@ main (const int argc, const char** argv)
 				{
 					if (packetFormat == COMPRESSED_PACKET)
 					{
-						formatTruncationCheck = snprintf(packet.windDirection, 2, "%c", compressedWindDirection((int)x % 360));
+						sprintf(packet.windDirection, "%c", compressedWindDirection((int)x % 360));
 					}
 					else
 					{
-						formatTruncationCheck = snprintf(packet.windDirection, 4, "%03d", (int)(round(x)) % 360);
+						sprintf(packet.windDirection, "%03d", (int)(round(x)) % 360);
 					}
-					assert(formatTruncationCheck >= 0);
 				}
 				break;
 
@@ -280,13 +290,11 @@ main (const int argc, const char** argv)
 				{
 					if (packetFormat == COMPRESSED_PACKET)
 					{
-						formatTruncationCheck = snprintf(packet.windSpeed, 2, "%c",
-						                                 compressedWindSpeed((const uint16_t)x));
+						sprintf(packet.windSpeed, "%c", compressedWindSpeed((const uint16_t)x));
 					}
 					else {
-						formatTruncationCheck = snprintf(packet.windSpeed, 4, "%03d", (int)(round(x)));
+						sprintf(packet.windSpeed, "%03d", (int)(round(x)));
 					}
-					assert(formatTruncationCheck >= 0);
 				}
 				break;
 
@@ -300,8 +308,7 @@ main (const int argc, const char** argv)
 				}
 				else
 				{
-					formatTruncationCheck = snprintf(packet.gust, 4, "%03d", (int)(round(x)) );
-					assert(formatTruncationCheck >= 0);
+					sprintf(packet.gust, "%03d", (int)(round(x)) );
 				}
 				break;
 
@@ -315,8 +322,7 @@ main (const int argc, const char** argv)
 				}
 				else
 				{
-					formatTruncationCheck = snprintf(packet.temperature, 4, "%03d", (int)(round(x)) );
-					assert(formatTruncationCheck >= 0);
+					sprintf(packet.temperature, "%03d", (int)(round(x)) );
 				}
 				break;
 
@@ -331,8 +337,7 @@ main (const int argc, const char** argv)
 				}
 				else
 				{
-					formatTruncationCheck = snprintf(packet.temperature, 4, "%03d", (int)(round(x)) );
-					assert(formatTruncationCheck >= 0);
+					sprintf(packet.temperature, "%03d", (int)(round(x)) );
 				}
 				break;
 
@@ -395,20 +400,18 @@ main (const int argc, const char** argv)
 					 */
 					if (x > 10)
 					{
-						formatTruncationCheck = snprintf(packet.snowfallLast24Hours, 4, "%03d",
-						                                 (unsigned short)floor(x));
+						sprintf(packet.snowfallLast24Hours, "%03d", (unsigned short)floor(x));
 					}
 					else if (x >= 9.95)
 					{
 						/* This avoids the previous case from printing "10.",
 						   while keeping the accuracy of the other two cases. */
-						formatTruncationCheck = snprintf(packet.snowfallLast24Hours, 4, "%03d", 10);
+						sprintf(packet.snowfallLast24Hours, "%03d", 10);
 					}
 					else
 					{
-						formatTruncationCheck = snprintf(packet.snowfallLast24Hours, 4, "%1.1f", x);
+						sprintf(packet.snowfallLast24Hours, "%1.1f", x);
 					}
-					assert(formatTruncationCheck >= 0);
 				}
 				break;
 
@@ -431,8 +434,7 @@ main (const int argc, const char** argv)
 					else if (h == 100) {
 						h = 0;
 					}
-					formatTruncationCheck = snprintf(packet.humidity, 3, "%.2d", h);
-					assert(formatTruncationCheck >= 0);
+					sprintf(packet.humidity, "%.2d", h);
 				}
 				break;
 
@@ -446,8 +448,7 @@ main (const int argc, const char** argv)
 				}
 				else
 				{
-					formatTruncationCheck = snprintf(packet.pressure, 6, "%.5d", (int)(round(x * 10)) );
-					assert(formatTruncationCheck >= 0);
+					sprintf(packet.pressure, "%.5d", (int)(round(x * 10)) );
 				}
 				break;
 
@@ -463,8 +464,7 @@ main (const int argc, const char** argv)
 					 * resolution to use.  Values under 1000 are encoded as
 					 * "L000" and values over 1000 are encoded as "l000".
 					 */
-					formatTruncationCheck = snprintf(packet.luminosity, 5, "L%.3d", (int)(x) % 1000);
-					assert(formatTruncationCheck >= 0);
+					sprintf(packet.luminosity, "L%.3d", (int)(x) % 1000);
 					if (x > 999) {
 						packet.luminosity[0] = 'l';
 					}
@@ -482,8 +482,7 @@ main (const int argc, const char** argv)
 					for (; x > 100; magnitude++) {
 						x /= 10;
 					}
-					formatTruncationCheck = snprintf(packet.radiation, 4, "%.2d%d", (unsigned short)x, magnitude);
-					assert(formatTruncationCheck >= 0);
+					sprintf(packet.radiation, "%.2d%d", (unsigned short)x, magnitude);
 				}
 				break;
 
@@ -494,8 +493,7 @@ main (const int argc, const char** argv)
 					fprintf(stderr, "%s: option `-%c' must be between -99.9 and 99.9 feet.\n", argv[0], optopt);
 					return EXIT_FAILURE;
 				} else {
-					formatTruncationCheck = snprintf(packet.waterLevel, 4, "%.3d", (short)x * 10);
-					assert(formatTruncationCheck >= 0);
+					sprintf(packet.waterLevel, "%.3d", (short)x * 10);
 				}
 				break;
 
@@ -506,8 +504,7 @@ main (const int argc, const char** argv)
 					fprintf(stderr, "%s: option `-%c' must be between 0 and 99.9 volts.\n", argv[0], optopt);
 					return EXIT_FAILURE;
 				} else {
-					formatTruncationCheck = snprintf(packet.voltage, 4, "%.3d", (short)x * 10);
-					assert(formatTruncationCheck >= 0);
+					sprintf(packet.voltage, "%.3d", (short)x * 10);
 				}
 				break;
 
@@ -518,14 +515,19 @@ main (const int argc, const char** argv)
 			
 			/* -M | --comment: Add comment to packet. */
 			case 'M':
-				formatTruncationCheck = snprintf(packet.comment, strlen(optarg)+1, "%s", optarg);
-				if (formatTruncationCheck > 0)
+				size_t argLength = strlen(optarg);
+				if (argLength <= 43)
 				{
-					fprintf(stderr, "Your comment was truncated by %d characters.", formatTruncationCheck);
+					strcpy(packet.comment, optarg);
 				}
-				if (strlen(packet.comment) > 43)
-				{
-					fprintf(stderr, "Your comment was %lu characters long.  APRS allows 43 characters.  Your comment may be truncated.", strlen(packet.comment));
+				else {
+					char   comment[43] = "";
+					size_t i = 0;
+					for (; i < MAX(argLength,43); i++) {
+						comment[i] = optarg[i];
+					}
+					fprintf(stderr, "Your comment was %lu characters long.  APRS allows 43 characters.  Your comment may be truncated.", argLength - 43);
+					strcpy(packet.comment, comment);
 				}
 				break;
 				
@@ -577,7 +579,7 @@ main (const int argc, const char** argv)
  * @author Colin Cogle
  * @since  0.1
  */
-inline void
+void
 version (void)
 {
 	printf("%s, version %s", PACKAGE, VERSION);
@@ -601,7 +603,7 @@ General Public License (version 3.0) for more details.");
  * @author Colin Cogle
  * @since  0.1
  */
-inline void
+void
 usage(void)
 {
 	printf("Usage: %s --callsign [CALLSIGN[-SSID]] --latitude [LATITUDE] --longitude [LONGITUDE] [OTHER PARAMETERS]\n", PACKAGE);
@@ -614,7 +616,7 @@ usage(void)
  * @author Colin Cogle
  * @since  0.1
  */
-inline void
+void
 help (void)
 {
 	version();
diff --git a/src/main.h b/src/main.h
index 538c67c..1d7c682 100755
--- a/src/main.h
+++ b/src/main.h
@@ -28,9 +28,12 @@ with this program.  If not, see <https://www.gnu.org/licenses/agpl-3.0.html>.
 #endif
 
 #ifndef VERSION
-#define VERSION "1.6-git"
+#define VERSION "1.6-git_C89"
 #endif
 
+int
+round (double x);
+
 /**
  * usage() -- show some help.
  *
